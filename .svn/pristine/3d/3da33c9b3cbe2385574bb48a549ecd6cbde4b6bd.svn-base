/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mecasut.reportes.sabana;

import java.sql.SQLException;

/**
 *
 * @author Cuauhtemoc Medina Muñoz
 */
public class SabanaEficiencia extends SabanaCategorias {

    ListaCertificaciones certificaciones;
    ListaEdificios edificios;
    int contCol = 0;
    int c = 0;
    int f = 5;

    public SabanaEficiencia() {
        super();
    }
    
    @Override
    protected void finalize() throws Throwable {
        super.finalize();
        System.err.println("Sabana Eficiencia Eliminada :)");
    }

    public SabanaEficiencia(String anio, HojaCalculo obj, String periodo, ListaUniversidades univs, ListaNiveles niveles) {
        super(periodo, obj, univs, niveles, anio);
        this.certificaciones = new ListaCertificaciones();
        this.edificios = new ListaEdificios();
        this.f += univs.size();
    }

    public HojaCalculo hacerEficiencia() {
        indicador12();
        indicador13();
        indicador13b();
        indicador13c();
        indicador14();
        indicador15();
        indicador16();
        indicador17();
        niveles = null;
        con.Desconectar();
        return obj;
    }

    private void indicador12() {
        c = 4;
        obj.crearHoja("Ind. 12 ", f, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(2);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("12. COSTO POR ALUMNO", contCol, contCol + 1, 1, 1, "h1");
            obj.val(contCol, 2, "Presupuesto total autorizado Federal y Estatal", "h2");
            obj.val(contCol + 1, 2, "Matrícula inicial atendida en el ciclo escolar", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT autorizado FROM eficaciain11 "
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol, unis + 3, rs.getDouble("autorizado"), "datos2");
                } else { //si no hay una respuesta de la consulta
                    obj.val(contCol, unis + 3, "NO CONCLUIDO", "error");
                }
                obj.val(contCol + 1, unis + 3, univs.getMatriculaTotal(unis), "datos");
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 12 " + ex.getMessage());
        }
    }

    private void indicador13() {
        c = 7;
        obj.crearHoja("Ind. 13 ", f, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(2);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("13. CAPACIDAD INSTALADA EN LAS UNIVERSIDADES", contCol, contCol + 3, 1, 1, "h1");
            obj.val(contCol, 2, "Número de unidades, laboratorios y talleres", "h2");
            obj.val(contCol + 1, 2, "Total de espacios docentes", "h2");
            obj.val(contCol + 2, 2, "Total del espacio académico ocupado por otras áreas de trabajo", "h2");
            obj.val(contCol + 3, 2, "Matrícula inicial atendida en el ciclo escolar", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT SUM(no_laboratorios) as 'cantidadEdificios', SUM(e.capacidad*i.no_laboratorios) as 'totalEspacios', "
                        .concat(" SUM(i.espacio_academico) as 'espacioAcademico' FROM eficienciain13 i INNER JOIN edificios ")
                        .concat(" e ON i.id_edifi=e.id_edificio")
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol, unis + 3, rs.getInt("cantidadEdificios"), "datos");
                    obj.val(contCol + 1, unis + 3, rs.getInt("totalEspacios"), "datos");
                    obj.val(contCol + 2, unis + 3, rs.getInt("espacioAcademico"), "datos");
                    obj.val(contCol + 3, unis + 3, univs.getMatriculaTotal(unis), "datos");
                } else {
                    obj.combinarCeldas("NO CONCLUIDO", contCol, contCol + 3, unis + 3, unis + 3, "error");
                }
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 13 " + ex.getMessage());
        }
    }

    private void indicador13b() {
        c = 8 + edificios.size() * 3;
        obj.crearHoja("Ind. 13 b ", f, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 3000);
        }
        columnasPrincipales(3);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("13. UTILIZACIÓN DE ESPACIOS EN LAS UNIVERSIDADES", contCol, contCol + edificios.size() * 3 - 1 + 6, 1, 1, "h1");
            for (int edif = 0; edif < edificios.size(); edif++) {
                obj.combinarCeldas(edificios.getNombre(edif), contCol, contCol + 2, 2, 2, "h1");
                obj.val(contCol, 3, "Capacidad", "h2");
                obj.val(contCol + 1, 3, "Número", "h2");
                obj.val(contCol + 2, 3, "Total", "h2");
                for (int unis = 0; unis < univs.size(); unis++) {
                    obj.val(contCol, unis + 4, edificios.getCapacidad(edif), "datos");
                    consulta = "SELECT no_laboratorios FROM eficienciain13"
                            .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                            .concat(" AND id_periodo=").concat(periodo)
                            .concat(" AND id_edifi=").concat(String.valueOf(edificios.getId(edif)));
                    rs = con.Consultar(consulta);
                    if (rs.next()) { //si hay una respuesta de la consulta
                        obj.val(contCol + 1, unis + 4, rs.getInt("no_laboratorios"), "datos");
                        obj.val(contCol + 2, unis + 4, (rs.getInt("no_laboratorios")) * (edificios.getCapacidad(edif)), "datos");
                    } else {
                        obj.val(contCol + 1, unis + 4, "NO CONCLUIDO", "error");
                        obj.val(contCol + 2, unis + 4, "NO CONCLUIDO", "error");
                    }
                }
                contCol += 3;
            }
            obj.combinarCeldas("NÚMERO TOTAL DE UNIDADES, LABORATORIOS Y TALLERES", contCol, contCol, 2, 3, "h1");
            obj.combinarCeldas("TOTAL DE ESPACIOS DOCENTES", contCol + 1, contCol + 1, 2, 3, "h1");
            obj.combinarCeldas("CAPACIDAD OCUPADA POR OTRAS ÁREAS DE TRABAJO", contCol + 2, contCol + 2, 2, 3, "h1");
            obj.combinarCeldas("MATRICULA TOTAL", contCol + 3, contCol + 3, 2, 3, "h1");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT SUM(no_laboratorios) as 'cantidadEdificios', SUM(e.capacidad*i.no_laboratorios) as 'totalEspacios', "
                        .concat(" SUM(i.espacio_academico) as 'espacioAcademico' FROM eficienciain13 i INNER JOIN edificios ")
                        .concat(" e ON i.id_edifi=e.id_edificio")
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol, unis + 4, rs.getInt("cantidadEdificios"), "datos");
                    obj.val(contCol + 1, unis + 4, rs.getInt("totalEspacios"), "datos");
                    obj.val(contCol + 2, unis + 4, rs.getInt("espacioAcademico"), "datos");
                    obj.val(contCol + 3, unis + 4, univs.getMatriculaTotal(unis), "datos");
                } else {
                    obj.combinarCeldas("NO CONCLUIDO", contCol, contCol + 3, unis + 4, unis + 4, "error");
                }
            }
            obj.combinarCeldas("CAPACIDAD INSTALADA", contCol + 4, contCol + 5, 2, 2, "h1");
            obj.val(contCol + 4, 3, "TURNO MATUTINO", "h2");
            obj.val(contCol + 5, 3, "TURNO VESPERTINO", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT turno_matutino, turno_vespertino FROM eficienciain13_1 "
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol + 4, unis + 4, rs.getInt("turno_matutino"), "datos");
                    obj.val(contCol + 5, unis + 4, rs.getInt("turno_vespertino"), "datos");
                } else {
                    obj.combinarCeldas("NO CONCLUIDO", contCol + 4, contCol + 5, unis + 4, unis + 4, "error");
                }
            }
            for (int i = 0; i <=5; i++) {
                obj.setAnchoColumna(contCol+i, 4500);
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 13 b " + ex.getMessage());
        } finally {
            edificios = null;
        }
    }

    private void indicador13c() {
        c = 5;
        obj.crearHoja("Ind. 13 c ", f, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(2);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("13 b. DISTRIBUCIÓN DE LA MATRÍCULA INICIAL DEL CICLO ESCOLAR", contCol, contCol + 2, 1, 1, "h1");
            obj.val(contCol, 2, "Turno matutino", "h2");
            obj.val(contCol + 1, 2, "Turno vespertino", "h2");
            obj.val(contCol + 2, 2, "Matrícula inicial atendida en el ciclo escolar", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT turno_matutino, turno_vespertino FROM eficienciain13_1 "
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol, unis + 3, rs.getInt("turno_matutino"), "datos");
                    obj.val(contCol + 1, unis + 3, rs.getInt("turno_vespertino"), "datos");
                } else {
                    obj.combinarCeldas("NO CONCLUIDO", contCol, contCol + 1, unis + 3, unis + 3, "error");
                }
                obj.val(contCol + 2, unis + 3, univs.getMatriculaTotal(unis), "datos");
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 13 c" + ex.getMessage());
        }
    }

    private void indicador14() {
        c = 12;
        obj.crearHoja("Ind. 14 ", f + 1, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(3);
        obj.setAlturaFilas(2, 25);
        obj.setAlturaFilas(3, 40);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("14. UTILIZACIÓN DEL EQUIPO DE CÓMPUTO", contCol, contCol + 9, 1, 1, "h1");
            obj.combinarCeldas("Distribución del Equipo de Cómputo", contCol, contCol + 4, 2, 2, "h1");
            obj.combinarCeldas("Distribución del Equipo de Cómputo con Internet", contCol + 5, contCol + 9, 2, 2, "h1");
            obj.val(contCol, 3, "Docente de tiempo completo", "h2");
            obj.val(contCol + 1, 3, "Docente de Asignatura", "h2");
            obj.val(contCol + 2, 3, "Alumnos", "h2");
            obj.val(contCol + 3, 3, "Personal Administrativo", "h2");
            obj.val(contCol + 4, 3, "Mandos Medios y Superiores", "h2");
            obj.val(contCol + 5, 3, "Docente de tiempo completo", "h2");
            obj.val(contCol + 6, 3, "Docente de Asignatura", "h2");
            obj.val(contCol + 7, 3, "Alumnos", "h2");
            obj.val(contCol + 8, 3, "Personal Administrativo", "h2");
            obj.val(contCol + 9, 3, "Mandos Medios y Superiores", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT docente_ptc, docente_asignatura, alumnos, personal_admin, mandos, docentes_ptc_int, "
                        .concat(" docente_asignatura_int, alumnos_int, personal_admin_int, mandos_int FROM eficienciain14")
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol, unis + 4, rs.getInt("docente_ptc"), "datos");
                    obj.val(contCol + 1, unis + 4, rs.getInt("docente_asignatura"), "datos");
                    obj.val(contCol + 2, unis + 4, rs.getInt("alumnos"), "datos");
                    obj.val(contCol + 3, unis + 4, rs.getInt("personal_admin"), "datos");
                    obj.val(contCol + 4, unis + 4, rs.getInt("mandos"), "datos");
                    obj.val(contCol + 5, unis + 4, rs.getInt("docentes_ptc_int"), "datos");
                    obj.val(contCol + 6, unis + 4, rs.getInt("docente_asignatura_int"), "datos");
                    obj.val(contCol + 7, unis + 4, rs.getInt("alumnos_int"), "datos");
                    obj.val(contCol + 8, unis + 4, rs.getInt("personal_admin_int"), "datos");
                    obj.val(contCol + 9, unis + 4, rs.getInt("mandos_int"), "datos");
                } else {
                    obj.combinarCeldas("NO CONCLUIDO", contCol, contCol + 4, unis + 4, unis + 4, "error");
                    obj.combinarCeldas("NO CONCLUIDO", contCol + 5, contCol + 9, unis + 4, unis + 4, "error");
                }
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 14 " + ex.getMessage());
        }
    }

    private void indicador15() {
        c = 2 + (certificaciones.size() * 5);
        obj.crearHoja("Ind. 15", f + 1, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(3);
        obj.setAlturaFilas(2, 25);
        obj.setAlturaFilas(3, 40);
        contCol = 2;
        /*titulo general*/
        try {
            for (int cert = 0; cert < certificaciones.size(); cert++) {//mueve las certificaciones
                obj.combinarCeldas("15. SITUCACIÓN DE CERTIFICACIONES", contCol, contCol + 4, 1, 1, "h1");
                obj.combinarCeldas("Certificado " + certificaciones.getNombre(cert), contCol, contCol + 4, 2, 2, "h1");
                obj.val(contCol, 3, "Sin certificado", "h2");
                obj.val(contCol + 1, 3, "En proceso de certificación", "h2");
                obj.val(contCol + 2, 3, "Con certificación", "h2");
                obj.val(contCol + 3, 3, "En proceso de recertificación", "h2");
                obj.val(contCol + 4, 3, "Con recertificado", "h2");
                for (int unis = 0; unis < univs.size(); unis++) {
                    consulta = "SELECT sin_certificado, en_proceso, con_certificado, en_proceso_recertificacion, con_recertificado "
                            .concat(" FROM eficienciain15 ")
                            .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                            .concat(" AND id_periodo=").concat(periodo)
                            .concat(" AND id_certificacion=").concat(String.valueOf(certificaciones.getId(cert)));
                    rs = con.Consultar(consulta);
                    if (rs.next()) { //si hay una respuesta de la consulta
                        obj.val(contCol, unis + 4, rs.getInt("sin_certificado"), "datos");
                        obj.val(contCol + 1, unis + 4, rs.getInt("en_proceso"), "datos");
                        obj.val(contCol + 2, unis + 4, rs.getInt("con_certificado"), "datos");
                        obj.val(contCol + 3, unis + 4, rs.getInt("en_proceso_recertificacion"), "datos");
                        obj.val(contCol + 4, unis + 4, rs.getInt("con_recertificado"), "datos");
                    } else {
                        obj.combinarCeldas("NO CONCLUIDO", contCol, contCol + 4, unis + 4, unis + 4, "error");
                    }
                }
                contCol += 5;
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 15 " + ex.getMessage());
        } finally {
            certificaciones = null;
        }
    }

    private void indicador16() {
        c = 7;
        obj.crearHoja("Ind. 16 ", f, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(2);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("16. DISTRIBUCIÓN DE LIBROS Y TÍTULOS POR ALUMNOS", contCol, contCol + 4, 1, 1, "h1");
            obj.val(contCol, 2, "Número de libros", "h2");
            obj.val(contCol + 1, 2, "Número de títulos", "h2");
            obj.val(contCol + 2, 2, "Número de subscripciones a revistas físicamente o electrónicas vigentes al ciclo evaluado", "h2");
            obj.val(contCol + 3, 2, "Número de subscripciones a bibliotecas virtuales vigentes al ciclo escolar evaluado para ser consultadas por los alumnos", "h2");
            obj.val(contCol + 4, 2, "Matrícula inicial atendida en el ciclo escolar", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                consulta = "SELECT libros, titulos, revistas, bibliotecas FROM eficienciain16 "
                        .concat(" WHERE id_universidad=").concat(String.valueOf(univs.getId(unis)))
                        .concat(" AND id_periodo=").concat(periodo);
                rs = con.Consultar(consulta);
                obj.val(contCol + 4, unis + 3, univs.getMatriculaTotal(unis), "datos");
                if (rs.next()) { //si hay una respuesta de la consulta
                    obj.val(contCol, unis + 3, rs.getInt("libros"), "datos");
                    obj.val(contCol + 1, unis + 3, rs.getInt("titulos"), "datos");
                    obj.val(contCol + 2, unis + 3, rs.getInt("revistas"), "datos");
                    obj.val(contCol + 3, unis + 3, rs.getInt("bibliotecas"), "datos");
                } else {
                    obj.combinarCeldas("NO CONCLUIDO", contCol, contCol + 3, unis + 3, unis + 3, "error");
                }
            }
        } catch (SQLException ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 16 " + ex.getMessage());
        }
    }

    private void indicador17() {
        c = 4;
        obj.crearHoja("Ind. 17 ", f, c);
        obj.setAnchoColumna(1, 17500);
        int NoColumnas = c;
        for (int i = 2; i <= NoColumnas; i++) {
            obj.setAnchoColumna(i, 4250);
        }
        columnasPrincipales(2);
        contCol = 2;
        try {
            //ENCABEZADOS
            obj.combinarCeldas("17. RELACIÓN ALUMNO / DOCENTE", contCol, contCol + 1, 1, 1, "h1");
            obj.val(contCol, 2, "Matrícula total al inicio del ciclo escolar", "h2");
            obj.val(contCol + 1, 2, "Profesores de tiempo completo al iniciar el ciclo escolar", "h2");
            for (int unis = 0; unis < univs.size(); unis++) {
                obj.val(contCol, unis + 3, univs.getMatriculaTotal(unis), "datos");
                obj.val(contCol + 1, unis + 3, univs.getPtc(unis), "datos");
            }
        } catch (Exception ex) {
            System.err.println("ERROR BD: Sabana general, Eficiencia Indicador 17 " + ex.getMessage());
        }
    }
}